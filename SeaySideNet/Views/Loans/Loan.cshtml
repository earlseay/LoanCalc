@model SeaySideNet.Models.Loan

<script>
	$(function () {
		$("#loanBody_@Model.Id").on('hide.bs.collapse', function () {
			$("#loanBody_@Model.Id").parent().find('.glyphicon-chevron-down').addClass('glyphicon-chevron-right').removeClass('glyphicon-chevron-down')
		});
		$("#loanBody_@Model.Id").on('show.bs.collapse', function () {
			$("#loanBody_@Model.Id").parent().find('.glyphicon-chevron-right').addClass('glyphicon-chevron-down').removeClass('glyphicon-chevron-right')
		});
	});
</script>

<div class="panel panel-default giveMeSomeSpace">
	<div class="panel-heading">
		<div class="row">
			<div class="col col-sm-12">

				<a class="panel-title" data-toggle="collapse" href="#loanBody_@Model.Id" aria-expanded="false" aria-controls="loanBody_@Model.Id">
					<div class="row panel-title">

						<div class="col col-md-9">
							<h3 class="panel-title"><span class="glyphicon glyphicon-chevron-right"></span><span class="bold">@string.Format("{0:c}", Model.Current_AmountRemaining)</span> - @Model.Name</h3>
						</div>
						<div class="col col-md-3">
							<span class="bold">@Model.New_ProjectedPayoffDate.ToShortDateString()</span>
						</div>
					</div>
				</a>
			</div>
		</div>
		<div class="progress progress-striped progress-bar-warning">
			@{
				double percentComplete = 100;
				if (Model.Current_AmountRemaining > 0)
				{
					percentComplete = (1 - Math.Round((double)Model.Current_AmountRemaining / (double)Model.Original_AmountRemaining, 2, MidpointRounding.AwayFromZero)) * 100;
				}
				if(percentComplete < 0)
				{
					percentComplete = 0;
				}
			}
			<div class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="@percentComplete" aria-valuemin="0" aria-valuemax="100" style="width: @(percentComplete)%;">
				@(percentComplete)%
			</div>
		</div>
	</div>
	<div id="loanBody_@Model.Id" class="panel-body collapse panel-collapse">


		<div class="">

			<div class="row">
				<div class="col col-md-12">
					Regular Monthly Payment: @string.Format("{0:c}", Model.MonthlyPayment)
				</div>
				<div class="col col-lg-12">
					<span>
						Extra: @string.Format("{0:c}", Model.ExtraPaymentAmount)
					</span>
					<span class="glyphicon glyphicon-plus"></span>
					<span>
						Snowballed: @string.Format("{0:c}", Model.SnowballPaymentAmount)
					</span>
					<span class="glyphicon glyphicon-pause rotate90"></span>
					<span>
						@string.Format("{0:c}", Model.ExtraPaymentAmount + Model.SnowballPaymentAmount)
					</span>
				</div>
				<div class="col col-md-12">
					Total Monthly Payment: @string.Format("{0:c}", Model.MonthlyPayment + Model.ExtraPaymentAmount + Model.SnowballPaymentAmount)
				</div>
			</div>
			<div class="row">
				<div class="col col-md-12">
					New Projected Payoff: <span class="bold">@Model.New_ProjectedPayoffDate.ToShortDateString()</span>
				</div>
			</div>
			<div class="row">
				<div class="col col-md-12">
					Total Months to Payoff: <span class="badge danger">@Model.MonthsToPayOff</span>
				</div>
				<div class="col col-md-12">
					Total Months with Extra Payment : @Model.TotalMonthsSnowballed
				</div>
				@{
					var yearsToPayoff = Model.MonthsToPayOff > 0 ? Model.MonthsToPayOff / 12 >= 1 ? Model.MonthsToPayOff / 12 : 0 : 0;
					var leftoverMonths = Model.MonthsToPayOff % 12;
					var leftOverMonthsString = leftoverMonths > 0 ? leftoverMonths.ToString() + " months" : "";
					if (yearsToPayoff > 0)
					{
						<div class="col-md-12">
							Time to Payoff: @yearsToPayoff years @leftOverMonthsString
						</div>
			}
				}

				<div class="col-md-12">
					Payments made to date: <span class="badge success">@Model.MonthsPaid</span>
				</div>
				<div class="col-md-12">
					Payments left to make: <span class="badge text-info">@(Model.MonthsToPayOff - Model.MonthsPaid)</span>
				</div>
			</div>
			@if (Model.Payments.Count() > 0)
			{
				<div class="row">
					<div class="col col-md-12 table-overflow">

						<table class="table table-condensed table-bordered table-striped">
							<thead>
								<tr>
									<td>Date</td>
									<td>Loan Amount</td>
									<td>Payment Amount</td>
									<td>Principal</td>
									<td>Interest</td>
								</tr>
							</thead>
							<tbody>
								@foreach (var payment in Model.Payments)
								{
									@Html.Partial("Payment", payment)
								}
							</tbody>
						</table>

					</div>
				</div>
			}
		</div>
	</div>


</div>
